import { translate as t } from '@/plugins/i18n.plugin';

// From https://datatracker.ietf.org/doc/html/rfc7518#section-3.1
export const ALGORITHM_DESCRIPTIONS: { [k: string]: string } = {
  HS256: t('tools.jwt-parser.constants.text.hmac-using-sha-256'),
  HS384: t('tools.jwt-parser.constants.text.hmac-using-sha-384'),
  HS512: t('tools.jwt-parser.constants.text.hmac-using-sha-512'),
  RS256: t('tools.jwt-parser.constants.text.rsassa-pkcs1-v1_5-using-sha-256'),
  RS384: t('tools.jwt-parser.constants.text.rsassa-pkcs1-v1_5-using-sha-384'),
  RS512: t('tools.jwt-parser.constants.text.rsassa-pkcs1-v1_5-using-sha-512'),
  ES256: t('tools.jwt-parser.constants.text.ecdsa-using-p-256-and-sha-256'),
  ES384: t('tools.jwt-parser.constants.text.ecdsa-using-p-384-and-sha-384'),
  ES512: t('tools.jwt-parser.constants.text.ecdsa-using-p-521-and-sha-512'),
  PS256: t('tools.jwt-parser.constants.text.rsassa-pss-using-sha-256-and-mgf1-with-sha-256'),
  PS384: t('tools.jwt-parser.constants.text.rsassa-pss-using-sha-384-and-mgf1-with-sha-384'),
  PS512: t('tools.jwt-parser.constants.text.rsassa-pss-using-sha-512-and-mgf1-with-sha-512'),
  none: t('tools.jwt-parser.constants.text.no-digital-signature-or-mac-performed'),
};

// List extracted from IANA: https://www.iana.org/assignments/jwt/jwt.xhtml
export const CLAIM_DESCRIPTIONS: Record<string, string> = {
  typ: t('tools.user-agent-parser.texts.label-type'),
  alg: t('tools.jwt-parser.constants.text.algorithm'),
  iss: t('tools.jwt-parser.constants.text.issuer'),
  sub: t('tools.email-parser.texts.label-subject'),
  aud: t('tools.jwt-parser.constants.text.audience'),
  exp: t('tools.jwt-parser.constants.text.expiration-time'),
  nbf: t('tools.jwt-parser.constants.text.not-before'),
  iat: t('tools.jwt-parser.constants.text.issued-at'),
  jti: t('tools.jwt-parser.constants.text.jwt-id'),
  name: t('tools.jwt-parser.constants.text.full-name'),
  given_name: t('tools.jwt-parser.constants.text.given-name-s-or-first-name-s'),
  family_name: t('tools.jwt-parser.constants.text.surname-s-or-last-name-s'),
  middle_name: t('tools.jwt-parser.constants.text.middle-name-s'),
  nickname: t('tools.jwt-parser.constants.text.casual-name'),
  preferred_username: t('tools.jwt-parser.constants.text.shorthand-name-by-which-the-end-user-wishes-to-be-referred-to'),
  profile: t('tools.jwt-parser.constants.text.profile-page-url'),
  picture: t('tools.jwt-parser.constants.text.profile-picture-url'),
  website: t('tools.jwt-parser.constants.text.web-page-or-blog-url'),
  email: t('tools.jwt-parser.constants.text.preferred-e-mail-address'),
  email_verified: t('tools.jwt-parser.constants.text.true-if-the-e-mail-address-has-been-verified-otherwise-false'),
  gender: t('tools.meta-tag-generator.profile.text.gender'),
  birthdate: t('tools.jwt-parser.constants.text.birthday'),
  zoneinfo: t('tools.jwt-parser.constants.text.time-zone'),
  locale: t('tools.jwt-parser.constants.text.locale'),
  phone_number: t('tools.jwt-parser.constants.text.preferred-telephone-number'),
  phone_number_verified: t('tools.jwt-parser.constants.text.true-if-the-phone-number-has-been-verified-otherwise-false'),
  address: t('tools.jwt-parser.constants.text.preferred-postal-address'),
  updated_at: t('tools.jwt-parser.constants.text.time-the-information-was-last-updated'),
  azp: t('tools.jwt-parser.constants.text.authorized-party-the-party-to-which-the-id-token-was-issued'),
  nonce: t('tools.jwt-parser.constants.text.value-used-to-associate-a-client-session-with-an-id-token'),
  auth_time: t('tools.jwt-parser.constants.text.time-when-the-authentication-occurred'),
  at_hash: t('tools.jwt-parser.constants.text.access-token-hash-value'),
  c_hash: t('tools.jwt-parser.constants.text.code-hash-value'),
  acr: t('tools.jwt-parser.constants.text.authentication-context-class-reference'),
  amr: t('tools.jwt-parser.constants.text.authentication-methods-references'),
  sub_jwk: t('tools.jwt-parser.constants.text.public-key-used-to-check-the-signature-of-an-id-token'),
  cnf: t('tools.jwt-parser.constants.text.confirmation'),
  sip_from_tag: t('tools.jwt-parser.constants.text.sip-from-tag-header-field-parameter-value'),
  sip_date: t('tools.jwt-parser.constants.text.sip-date-header-field-value'),
  sip_callid: t('tools.jwt-parser.constants.text.sip-call-id-header-field-value'),
  sip_cseq_num: t('tools.jwt-parser.constants.text.sip-cseq-numeric-header-field-parameter-value'),
  sip_via_branch: t('tools.jwt-parser.constants.text.sip-via-branch-header-field-parameter-value'),
  orig: t('tools.jwt-parser.constants.text.originating-identity-string'),
  dest: t('tools.jwt-parser.constants.text.destination-identity-string'),
  mky: t('tools.jwt-parser.constants.text.media-key-fingerprint-string'),
  events: t('tools.jwt-parser.constants.text.security-events'),
  toe: t('tools.jwt-parser.constants.text.time-of-event'),
  txn: t('tools.jwt-parser.constants.text.transaction-identifier'),
  rph: t('tools.jwt-parser.constants.text.resource-priority-header-authorization'),
  sid: t('tools.jwt-parser.constants.text.session-id'),
  vot: t('tools.jwt-parser.constants.text.vector-of-trust-value'),
  vtm: t('tools.jwt-parser.constants.text.vector-of-trust-trustmark-url'),
  attest: t('tools.jwt-parser.constants.text.attestation-level-as-defined-in-shaken-framework'),
  origid: t('tools.jwt-parser.constants.text.originating-identifier-as-defined-in-shaken-framework'),
  act: t('tools.meta-tag-generator.videoMovie.text.actor'),
  scope: t('tools.jwt-parser.constants.text.scope-values'),
  client_id: t('tools.jwt-parser.constants.text.client-identifier'),
  may_act: t('tools.jwt-parser.constants.text.authorized-actor-the-party-that-is-authorized-to-become-the-actor'),
  jcard: t('tools.jwt-parser.constants.text.jcard-data'),
  at_use_nbr: t('tools.jwt-parser.constants.text.number-of-api-requests-for-which-the-access-token-can-be-used'),
  div: t('tools.jwt-parser.constants.text.diverted-target-of-a-call'),
  opt: t('tools.jwt-parser.constants.text.original-passport-in-full-form'),
  vc: t('tools.jwt-parser.constants.text.verifiable-credential-as-specified-in-the-w3c-recommendation'),
  vp: t('tools.jwt-parser.constants.text.verifiable-presentation-as-specified-in-the-w3c-recommendation'),
  sph: t('tools.jwt-parser.constants.text.sip-priority-header-field'),
  ace_profile: t('tools.jwt-parser.constants.text.ace-profile-a-token-is-supposed-to-be-used-with'),
  cnonce: t('tools.jwt-parser.constants.text.client-nonce'),
  exi: t('tools.jwt-parser.constants.text.expires-in'),
  roles: t('tools.jwt-parser.constants.text.roles'),
  groups: t('tools.regex-tester.groups'),
  entitlements: t('tools.jwt-parser.constants.text.entitlements'),
  token_introspection: t('tools.jwt-parser.constants.text.token-introspection-response'),
};
